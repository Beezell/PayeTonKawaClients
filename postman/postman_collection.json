{
	"info": {
		"_postman_id": "433cb634-de52-4537-a92b-98f8e0ba7dbd",
		"name": "Clients",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27330444",
		"_collection_link": "https://dark-space-645618.postman.co/workspace/Team-Workspace~42db1666-9ec4-483f-8f0f-dc37765f2fbc/collection/27330444-433cb634-de52-4537-a92b-98f8e0ba7dbd?action=share&source=collection_link&creator=27330444"
	},
	"item": [
		{
			"name": "Ajouter un client",
			"event": [
			{
				"listen": "test",
				"script": {
				"exec": [
					"pm.test(\"Status code is 200 or 201\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
					"});",
					"",
					"pm.test(\"Response 'success' is true\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.success).to.be.true;",
					"});",
					"",
					"pm.test(\"Response has success message\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.message).to.eql('Client créé avec succès');",
					"});",
					"",
					"pm.test(\"Response has client data\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.data).to.be.an('object').that.is.not.empty;",
					"});",
					"",
					"pm.test(\"Client data has required properties\", function () {",
					"    var jsonData = pm.response.json();",
					"    var clientData = jsonData.data;",
					"    pm.expect(clientData).to.have.property('id');",
					"    pm.expect(clientData).to.have.property('createdAt');",
					"    pm.expect(clientData).to.have.property('pseudo');",
					"    pm.expect(clientData).to.have.property('motDePasse');",
					"    pm.expect(clientData).to.have.property('roleId');",
					"    pm.expect(clientData).to.have.property('role');",
					"});",
					"",
					"pm.test(\"Client data has optional properties\", function () {",
					"    var jsonData = pm.response.json();",
					"    var clientData = jsonData.data;",
					"    pm.expect(clientData).to.have.property('personne');",
					"    pm.expect(clientData).to.have.property('entreprise');",
					"    pm.expect(clientData).to.have.property('addresses');",
					"});",
					"",
					"pm.test(\"Client ID is a valid UUID\", function () {",
					"    var jsonData = pm.response.json();",
					"    var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
					"    pm.expect(jsonData.data.id).to.match(uuidRegex);",
					"});",
					"",
					"pm.test(\"CreatedAt is a valid date\", function () {",
					"    var jsonData = pm.response.json();",
					"    var createdAt = new Date(jsonData.data.createdAt);",
					"    pm.expect(createdAt).to.be.a('date');",
					"    pm.expect(createdAt.toString()).to.not.equal('Invalid Date');",
					"});",
					"",
					"pm.test(\"Role object has expected properties\", function () {",
					"    var jsonData = pm.response.json();",
					"    var role = jsonData.data.role;",
					"    pm.expect(role).to.have.property('id');",
					"    pm.expect(role).to.have.property('name');",
					"    pm.expect(role.id).to.be.a('number');",
					"    pm.expect(role.name).to.be.a('string').that.is.not.empty;",
					"});",
					"",
					"pm.test(\"RoleId matches role.id\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.data.roleId).to.equal(jsonData.data.role.id);",
					"});",
					"",
					"pm.test(\"Addresses is an array\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.data.addresses).to.be.an('array');",
					"});",
					"",
					"// Store the created client UUID for use in other requests",
					"pm.test(\"Store client UUID in environment\", function () {",
					"    var jsonData = pm.response.json();",
					"    if (jsonData.success && jsonData.data && jsonData.data.id) {",
					"        pm.environment.set('clientId', jsonData.data.id);",
					"        console.log('Client UUID stored in environment variable: ' + jsonData.data.id);",
					"    }",
					"});"
				],
				"type": "text/javascript"
				}
			}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
						"raw": "{\r\n  \"pseudo\": \"teste\",\r\n  \"motDePasse\": \"test\",\r\n  \"personne\": {\r\n    \"nom\": \"Hello\",\r\n    \"prenom\": \"Grand\",\r\n    \"mail\": \"azerty@gmail.com\",\r\n    \"telephone\": \"041415161\",\r\n    \"dateNaissance\": \"2000-12-14T00:00:00.000Z\"\r\n  },\r\n  \"entreprise\": {\r\n    \"nomEntreprise\": \"PayeTonKawa\",\r\n    \"siret\": \"1456695223655\"\r\n  },\r\n  \"addresses\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/ajouter",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ajouter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Vérifier mot de passe (Login)",
			"event": [
			{
				"listen": "test",
				"script": {
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"Response 'success' is true\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.success).to.be.true;",
					"});",
					"",
					"pm.test(\"Response has authentication message\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.message).to.eql('Authentification réussie');",
					"});",
					"",
					"pm.test(\"Response has a valid JWT token\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.token).to.be.a('string').that.is.not.empty;",
					"    pm.expect(jsonData.token.split('.')).to.have.lengthOf(3);",
					"});",
					"",
					"pm.test(\"Response has client data\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.data).to.be.an('object').that.is.not.empty;",
					"});",
					"",
					"pm.test(\"Client data has expected properties\", function () {",
					"    var jsonData = pm.response.json();",
					"    var clientData = jsonData.data;",
					"    pm.expect(clientData).to.have.property('id');",
					"    pm.expect(clientData).to.have.property('createdAt');",
					"    pm.expect(clientData).to.have.property('pseudo');",
					"    pm.expect(clientData).to.have.property('motDePasse');",
					"    pm.expect(clientData).to.have.property('roleId');",
					"    pm.expect(clientData).to.have.property('role');",
					"});",
					"",
					"pm.test(\"Role object has expected properties\", function () {",
					"    var jsonData = pm.response.json();",
					"    var role = jsonData.data.role;",
					"    pm.expect(role).to.have.property('id');",
					"    pm.expect(role).to.have.property('name');",
					"    pm.expect(role.id).to.be.a('number');",
					"    pm.expect(role.name).to.be.a('string').that.is.not.empty;",
					"});",
					"",
					"pm.test(\"Client ID is a valid UUID\", function () {",
					"    var jsonData = pm.response.json();",
					"    var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
					"    pm.expect(jsonData.data.id).to.match(uuidRegex);",
					"});",
					"",
					"// Store the JWT token in environment variable for use in other requests",
					"pm.test(\"Store JWT token in environment\", function () {",
					"    var jsonData = pm.response.json();",
					"    if (jsonData.success && jsonData.token) {",
					"        pm.environment.set('jwtToken', jsonData.token);",
					"    }",
					"});"
				],
				"type": "text/javascript"
				}
			}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"pseudo\": \"test\",\r\n  \"motDePasse\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/verifier",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"verifier"
					]
				}
			},
			"response": []
		},
		{
			"name": "Afficher tous les clients",
						"event": [
			{
				"listen": "test",
				"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Statut de réponse = 403 ou 401\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
					"});",
					"",
					"const jsonData = pm.response.json();",
					"",
					"pm.test(\"La réponse contient success = false\", function () {",
					"    pm.expect(jsonData.success).to.eql(false);",
					"});",
					"",
					"pm.test(\"Message d'erreur correspondant à accès refusé\", function () {",
					"    pm.expect(jsonData.message).to.eql(\"Accès refusé : privilèges insuffisants\");",
					"});"
				]
				}
			}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3003/api/clients/afficherAll",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"api",
						"clients",
						"afficherAll"
					]
				}
			},
			"response": []
		},
		{
			"name": "Afficher un client par UUID",
			"event": [
				{
					"listen": "test",
					"script": {
					"type": "text/javascript",
					"exec": [
						"pm.test(\"Statut de réponse = 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"const jsonData = pm.response.json();",
						"",
						"pm.test(\"La réponse contient success = true\", function () {",
						"    pm.expect(jsonData.success).to.eql(true);",
						"});",
						"",
						"pm.test(\"Les données client sont présentes\", function () {",
						"    pm.expect(jsonData.data).to.be.an('object');",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data).to.have.property('pseudo');",
						"    pm.expect(jsonData.data).to.have.property('motDePasse');",
						"    pm.expect(jsonData.data).to.have.property('roleId');",
						"    pm.expect(jsonData.data).to.have.property('role');",
						"});",
						"",
						"pm.test(\"Le rôle est correctement défini\", function () {",
						"    pm.expect(jsonData.data.role).to.be.an('object');",
						"    pm.expect(jsonData.data.role).to.have.property('id');",
						"    pm.expect(jsonData.data.role).to.have.property('name');",
						"});"
					]
					}
				}
				],

			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/afficher/{{clientId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"afficher",
						"{{clientId}}"
					],
					"query": [
						{
							"key": "Authorization",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modifier un client",
			"event": [
			{
				"listen": "test",
				"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Statut de réponse = 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"const jsonData = pm.response.json();",
					"",
					"pm.test(\"La réponse contient success = true\", function () {",
					"    pm.expect(jsonData.success).to.eql(true);",
					"});",
					"",
					"pm.test(\"Message de confirmation correct\", function () {",
					"    pm.expect(jsonData.message).to.eql(\"Client mis à jour avec succès\");",
					"});",
					"",
					"pm.test(\"Les données modifiées du client sont présentes\", function () {",
					"    pm.expect(jsonData.data).to.be.an('object');",
					"    pm.expect(jsonData.data).to.have.property('id');",
					"    pm.expect(jsonData.data).to.have.property('createdAt');",
					"    pm.expect(jsonData.data).to.have.property('pseudo');",
					"    pm.expect(jsonData.data).to.have.property('motDePasse');",
					"    pm.expect(jsonData.data).to.have.property('roleId');",
					"});"
				]
				}
			}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"pseudo\": \"teste\",\r\n  \"motDePasse\": \"tessst\",\r\n  \"personne\": {\r\n    \"nom\": \"Helloooo\",\r\n    \"prenom\": \"Graddend\",\r\n    \"mail\": \"azerty@gmail.com\",\r\n    \"telephone\": \"041415161\",\r\n    \"dateNaissance\": \"2000-12-14T00:00:00.000Z\"\r\n  },\r\n  \"entreprise\": {\r\n    \"nomEntreprise\": \"PayeTonKawa\",\r\n    \"siret\": \"1456695223655\"\r\n  },\r\n  \"addresses\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/modifier/{{clientId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"modifier",
						"{{clientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supprimer un client",
			"event": [
			{
				"listen": "test",
				"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Statut de réponse = 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"const jsonData = pm.response.json();",
					"",
					"pm.test(\"La réponse contient success = true\", function () {",
					"    pm.expect(jsonData.success).to.eql(true);",
					"});",
					"",
					"pm.test(\"Message de confirmation correct\", function () {",
					"    pm.expect(jsonData.message).to.eql(\"Client et données liées supprimés avec succès\");",
					"});"
				]
				}
			}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/supprimer/{{clientId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"supprimer",
						"{{clientId}}"
					]
				}
			},
			"response": []
		}
	]
}